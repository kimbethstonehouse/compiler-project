program    ::= include structdecl vardecl fundecl EOF

include    ::= "#include" STRING_LITERAL include | ε

structdecl ::= structtype "{" type IDENT vardeclRest vardecl "}" ";" structdecl | ε

vardecl    ::= type IDENT vardeclrest vardecl | e
vardeclrest ::= ";" | "[" INT_LITERAL "]" ";"

fundecl    ::= type IDENT "(" params ")" block fundecl | ε

type       ::= ("int" | "char" | "void" | structtype) typeopt
typeopt    ::= "*" | ε

structtype ::= "struct" IDENT

params     ::= type IDENT paramsrep | ε
paramsrep ::= "," type IDENT paramsrep | ε

stmt       ::= block
             | "while" "(" exp ")" stmt
             | "if" "(" exp ")" stmt elseopt
             | "return" expopt ";"
             | exp stmtrest

stmtrest :: "=" exp ";" | ";"
elseopt ::= "else" stmt | ε
expopt ::= exp | ε

block     ::= "{" vardecl stmtrep "}"
stmtrep ::= stmt stmtrep | ε

exp  ::= expA opsA
opsA ::= ε | "||" expA opsA

expA ::= expB opsB
opsB ::= ε | "&&" expB opsB

expB ::= expC opsC
opsC ::= ε | "==" expC opsC | "!=" expC opsC

expC ::= expD opsD
opsD ::= ε | "<" expD opsD | "<=" expD opsD | ">" expD opsD | ">=" expD opsD

expD ::= expE opsE
opsE ::= ε | "+" expE opsE | "-" expE opsE

expE ::= expF opsF
opsF ::= ε | "*" expF opsF | "/" expF opsF | "%" expF opsF

expF ::= expG | "-" expF | sizeof | valueat | "(" exporType

expG ::= expH opsH
opsH ::= ε | "[" exp "]" | "." IDENT

expH ::= IDENT funcallOrIdent | INT_LITERAL | CHAR_LITERAL | STRING_LITERAL

exporType ::= exp ")" | type ")" exp
funcallOrIdent ::= e | "(" arglist ")"

arglist ::= exp argrep | ε
argrep ::= "," exp argrep | ε

valueat      ::= "*" exp
sizeof       ::= "sizeof" "(" type ")"
typecast     ::= "(" type ")" exp