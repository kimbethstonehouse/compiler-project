program    ::= include structdecl vardecl fundecl EOF

include    ::= "#include" STRING_LITERAL include | ε

structdecl ::= structtype "{" type IDENT vardeclRest vardecl "}" ";" structdecl | ε

vardecl    ::= type IDENT vardeclrest vardecl | e
vardeclrest ::= ";" | "[" INT_LITERAL "]" ";"

fundecl    ::= type IDENT "(" params ")" block fundecl | ε

type       ::= ("int" | "char" | "void" | structtype) typeopt
typeopt    ::= "*" | ε

structtype ::= "struct" IDENT

params     ::= type IDENT paramsrep | ε
paramsrep ::= "," type IDENT paramsrep | ε

stmt       ::= block
             | "while" "(" exp ")" stmt
             | "if" "(" exp ")" stmt elseopt
             | "return" expopt ";"
             | exp stmtrest

stmtrest :: "=" exp ";" | ";"
elseopt ::= "else" stmt | ε
expopt ::= exp | ε

block     ::= "{" vardecl stmtrep "}"
stmtrep ::= stmt stmtrep | ε

exp  ::= expA opsA
opsA ::= "||" expA opsA | ε

expA ::= expB opsB
opsB ::= "&&" expB opsB | ε

expB ::= expC opsC
opsC ::= ("=="|"!=") expC opsC | ε

expC ::= expD opsD
opsD ::= ("<"|">"|"<="|">=") expD opsD | ε

expD ::= expE opsE
opsE ::= ("+"|"-") expE opsE | ε

expE ::= expF opsF
opsF ::= ("*"|"/"|"%") expF opsF | ε

expF ::= expG | "-" expG | sizeof | valueat | typecast         # need lookahead here!

expG ::= expH opsH | funcall opsH                              # need lookahead here!
opsH ::= "[" exp "]" opsH | "." IDENT opsH | ε

expH ::= IDENT | INT_LITERAL | CHAR_LITERAL | STRING_LITERAL | "(" exp ")"

funcall ::= IDENT "(" arglist ")"
arglist ::= exp argrep | ε
argrep ::= "," exp argrep | ε

valueat      ::= "*" exp
sizeof       ::= "sizeof" "(" type ")"
typecast     ::= "(" type ")" exp