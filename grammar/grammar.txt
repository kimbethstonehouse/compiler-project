# #  comment
# () grouping
# [] optional
# *  zero or more
# +  one or more
# |  alternative


program    ::= includeRep structdeclRep vardeclRep fundeclRep EOF

include    ::= "#include" STRING_LITERAL
includeRep ::= include includeRep | epsilon

structdecl ::= structtype "{" (vardecl)+ "}" ";"
structdeclRep ::= structdecl structdeclRep | epsilon

vardecl    ::= type IDENT ";"        
             | type IDENT "[" INT_LITERAL "]" ";" 
vardeclRep ::= vardecl vardeclRep | epsilon

fundecl    ::= type IDENT "(" params ")" block    # function declaration
fundeclRep ::= fundecl fundeclRep | epsilon

type       ::= ("int" | "char" | "void" | structtype) ["*"]
structtype ::= "struct" IDENT

params     ::= [ type IDENT ("," type IDENT)* ]

stmt       ::= block
             | "while" "(" exp ")" stmt              # while loop
             | "if" "(" exp ")" stmt ["else" stmt]   # if then else
             | "return" [exp] ";"                    # return
             | exp "=" exp ";"                      # assignment
             | exp ";"                               # expression statement, e.g. a function call

block      ::= "{" (vardecl)* (stmt)* "}"

exp ::= expA opsA
opsA ::= epsilon | "||" expA opsA

expA ::= expB opsB
opsB :: = epsilon | "&&" expB opsB

expB ::= expC opsC
opsC ::= epsilon | "==" expC opsC | "!=" expC opsC

expC ::= expD opsD
opsD ::= epsilon | "<" expD opsD | "<=" expD opsD | ">" expD opsD | ">=" expD opsD

expD ::= expE opsE
opsE ::= epsilon | "+" expE | "-" expE

expE ::= expF opsF
opsF ::= epsilon | "*" expE | "/" expE | "%" expE

expF ::= expG | "-" expF

expG ::= expH | "[" expH "]" | "." IDENT

expH ::= "(" exp ")" | IDENT | INT_LITERAL | valueat | funcall | sizeof | typecast | CHAR_LITERAL | STRING_LITERAL

funcall      ::= IDENT "(" [ exp ("," exp)* ] ")"
valueat      ::= "*" exp                          # Value at operator (pointer indirection)
sizeof       ::= "sizeof" "(" type ")"            # size of type
typecast     ::= "(" type ")" exp                 # type casting

