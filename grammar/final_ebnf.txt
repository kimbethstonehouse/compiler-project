program    ::= include structdecl vardecl fundecl EOF

include    ::= "#include" STRING_LITERAL include | ε

structdecl ::= structtype "{" vardeclPosClosure "}" ";" structdecl | ε 

vardecl    ::= type IDENT vardeclRest vardeclPosClosure | e 
vardeclRest ::= ";" | type IDENT "[" INT_LITERAL "]" ";" 
vardeclPosClosure ::= vardecl vardeclPosClosure | vardecl

fundecl    ::= type IDENT "(" params ")" block fundecl | ε 

type       ::= ("int" | "char" | "void" | structtype) typeOpt
typeOpt    ::= "*" | ε 

structtype ::= struct IDENT 

params     ::= type IDENT paramsRep | ε 
paramsRep ::= "," type IDENT paramsRep | ε 

stmt       ::= block
             | while "(" exp ")" stmt 
             | if "(" exp ")" stmt stmtOpt1 
             | return stmtOpt2 ";"
             | exp stmtRest 

stmtRest ::= = exp ";" | ";" 
stmtOpt1 ::= else stmt | ε 
stmtOpt2 ::= exp | ε 

block     ::= "{" vardecl stmtRep "}" 
stmtRep ::= stmt stmtRep | ε 

exp  ::= expA opsA 
opsA ::= ε | "||" expA opsA 

expA ::= expB opsB 
opsB ::= ε | "&&" expB opsB 

expB ::= expC opsC 
opsC ::= ε | "==" expC opsC | "!=" expC opsC 

expC ::= expD opsD 
opsD ::= ε | "<" expD opsD | "<=" expD opsD | ">" expD opsD | ">=" expD opsD 

expD ::= expE opsE 
opsE ::= ε | "+" expE | "-" expE 

expE ::= expF opsF 
opsF ::= ε | "*" expE | "/" expE | "%" expE 

expF ::= expG | "-" expF | sizeof | valueat | typecast

expG ::= expH | "[" expH "]" | "." IDENT | funcall

expH ::= "(" exporType | IDENT | INT_LITERAL | CHAR_LITERAL | STRING_LITERAL 
exporType ::= exp ")" | type ")" exp


funcall ::= IDENT "(" arglist ")" 
arglist ::= exp argrep | ε
argrep ::= "," exp argrep | ε

valueat      ::= "*" exp 
sizeof       ::= sizeof "(" type ")" 
typecast     ::= "(" type ")" exp