program    -> includeRep structdeclRep (vardeclRep | ε) fundeclRep EOF .

include    -> "include" STRING_LITERAL . 
includeRep -> include includeRep | ε .

structdecl -> structtype { (vardeclRep | vardecl) } ; .
structdeclRep -> structdecl structdeclRep | ε .

vardecl    -> type IDENT vardeclRest .
vardeclRest -> ; | type IDENT LBRA INT_LITERAL RBRA ; .
vardeclRep -> vardecl vardeclRep .

fundecl    -> type IDENT LPAR params RPAR block .
fundeclRep -> fundecl fundeclRep | ε .

type       -> int typeOpt | char typeOpt | void typeOpt | structtype typeOpt .
typeOpt    -> ASTERISK | ε .

structtype -> struct IDENT .

params     -> type IDENT paramsRep | ε .
paramsRep -> , type IDENT paramsRep | ε .

stmt       -> block
             | while LPAR exp RPAR stmt 
             | if LPAR exp RPAR stmt stmtOpt1 
             | return stmtOpt2 ;
             | exp stmtRest .

stmtRest -> = exp ; | ; .
stmtOpt1 -> else stmt | ε .
stmtOpt2 -> exp | ε .

block     -> { blockRep1 blockRep2 } .
blockRep1 -> vardecl blockRep1 | ε .
blockRep2 -> stmt blockRep2 | ε .

exp  -> expA opsA .
opsA -> ε | OR expA opsA .

expA -> expB opsB .
opsB -> ε | AND expB opsB .

expB -> expC opsC .
opsC -> ε | EQ expC opsC | NE expC opsC .

expC -> expD opsD .
opsD -> ε | LT expD opsD | LE expD opsD | GT expD opsD |GE expD opsD .

expD -> expE opsE .
opsE -> ε | PLUS expE | MINUS expE .

expE -> expF opsF .
opsF -> ε | ASTERISK expE | DIV expE | REM expE .

expF -> expG | MINUS expF .

expG -> expH | LBRA expH RBRA | DOT IDENT .

expH -> LPAR expRest | IDENT identRest | INT_LITERAL | valueat | sizeof | CHAR_LITERAL | STRING_LITERAL .
expRest -> exp RPAR | type RPAR exp .

identRest -> ε | funcall .
funcall -> LPAR ( exp funcallRep | ε ) RPAR .
funcallRep -> , exp funcallRep | ε .


valueat      -> ASTERISK exp .
sizeof       -> sizeof LPAR type RPAR .
typecast     -> LPAR expRest .


